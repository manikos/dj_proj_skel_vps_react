"""
Fabfile for the:

+ Project git init
    - BitBucket repo creation
    - Git push to origin master
+ Creation of the local PostgreSQL project database.

Because Fabric is run only under Python 2 you should do install it
system-wide with:

$ sudo pip install fabric
$ cd /path/to/your/project
$ fab pg
$ fab git_setup

or install it inside a virtualenv (w python 2 interpreter):

$ mkvirtualenv -p $(which python2) venv_name
(venv_name)$ pip install fabric
(venv_name)$ cd /path/to/your/project
(venv_name)$ fab pg
(venv_name)$ fab git_setup
"""

from getpass import getpass

try:
    import yaml
except ImportError:
    raise RuntimeError('PyYAML not detected. Install it with: '
                       'sudo pip install pyyaml')

from fabric.api import env, local, settings, task
from fabric.context_managers import lcd
from fabric.operations import prompt


#####################
# INITIAL GIT SETUP #
#####################

def install_bitbucket_cli():
    local('sudo pip install bitbucket-cli')


def get_data():
    with open('../prod/group_vars/constants.yml', 'r') as y:
        try:
            obj = yaml.load(y)
        except yaml.YAMLError as e:
            return e
        else:
            bb_username = obj.get('BB_USERNAME')
            repo_name = obj.get('APP', None)
            return {
                'bb_username': bb_username,
                'repo_name': repo_name
            }


def create_repo():
    data = get_data()
    env.bbuser = data.get('bb_username')
    env.repo_name = data.get('repo_name')
    if env.bbuser is not None and env.repo_name is not None:
        # env.bbrepo = prompt('Enter repo name (bare name, w/o "_app" or
        # "_proj"):')
        # env.bbuser = prompt('Enter bitbucket username:')
        bbpwd = getpass('Enter bitbucket password: ')
        if bbpwd:
            local('bb create --username {user} --password {pwd} --private '
                  '--scm git {repo}'.
                  format(user=env.bbuser, pwd=bbpwd, repo=env.repo_name))
            return True
    return False


def git_init_push():
    ssh_url = 'ssh://git@bitbucket.org/{user}/{repo}.git'\
        .format(user=env.bbuser, repo=env.repo_name)

    with lcd('../../..'):  # go up, 3 times to be in the project root
        local('git init')
        local('git add --all')

        local('git remote add origin {}'.format(ssh_url))
        local('git commit -m "Initial commit"')

        local('git push -u origin master')


@task
def git_setup():
    install_bitbucket_cli()
    success = create_repo()
    if success:
        git_init_push()
    else:
        return 'Error during git init push. Investigate please :('


def repo_ssh_url():
    api_url = 'https://api.bitbucket.org/2.0/repositories'
    env.resp = local('curl --user {user}:{pwd} {api_url}/{user}/{repo}'
                     .format(user=env.bbuser, pwd=env.bbpwd,
                             api_url=api_url,
                             repo=env.bbrepo), capture=True)
    if env.resp:
        # convert JSON response of bitbucket into a Python dict
        d = loads(env.resp)
        for link in d['links']['clone']:
            if link['name'] == 'ssh':
                # i.e 'ssh://git@bitbucket.org/username/repo_name.git'
                env.ssh_url = link['href']


##########################
# INITIAL POSTGRES SETUP #
##########################

POSTGRES_PACKAGES = [
    'postgresql', 'libpq-dev', 'python-psycopg2', 'postgresql-client-common',
    'postgresql-client', 'postgresql-contrib', 'pgadmin3',
]


def install_required_packages():
    install_packages = prompt('Install required packages [y, n]?', default='n')
    if install_packages in ['y', 'yes']:
        local('sudo apt-get update', capture=True, shell='/bin/bash')
        local('sudo apt-get install -y {}'.format(' '.join(
            POSTGRES_PACKAGES)), shell='/bin/bash')


def create_pg_user():
    env.db_owner = prompt('Database username:', default=env['local_user'])
    # user_exists.stdout will be 1 if user found and None otherwise.
    user_exists = local('psql postgres -tAc "SELECT 1 FROM pg_roles WHERE '
                        'rolname=\'{}\'"'.format(env.db_owner), capture=True)
    if not user_exists.stdout:
        # -d: env.db_owner can create new databases
        # -E: env.db_owner's given password will be stored as a hashed value,
        # instead of plain text
        # Development dummy default password:
        #   123456 --hashed--> md575bd30c0d7a5d43d28f465a53cc8c340
        # The following CREATE ROLE command is identical to this IF given
        # password is 123456:
        #   'sudo -u postgres createuser -d -E -P {}'.format(env.db_owner)
        local('sudo -u postgres psql -c "CREATE ROLE {} ENCRYPTED PASSWORD '
              '\'md575bd30c0d7a5d43d28f465a53cc8c340\' '
              'NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;"'
              .format(env.db_owner), capture=True)


def create_db():
    db_name = prompt('Database name:', default='{{ project_name }}')
    with settings(warn_only=True):
        # -l: list available databases, then exit
        # -q: run quietly (no messages, only query output)
        # -t: print rows only
        db_exists = local('psql -lqt | cut -d \| -f 1 | grep -w {}'
                          .format(db_name), capture=True)
        if db_exists.failed:
            local('createdb {db_name} -O {owner}'
                  .format(db_name=db_name, owner=env.db_owner))


@task
def pg():
    install_required_packages()
    create_pg_user()
    create_db()
